openapi: 3.0.0
info:
  title: License management API
  description: 'License management API used for editing and managing user licenses
    and related products. This API supposed to be used privately and consumed by BSS
    and CMS. Only authorization with api key supported '
  version: 4.0.0
servers:
- url: https://virtserver.swaggerhub.com/24i-API/license/management/4.0.0
  description: SwaggerHub API Auto Mocking
- url: https://testing.booxmedia.xyz/api/license/management/v4
  description: Testing server
security:
- apiKeyAuth: []
paths:
  /licenses:
    get:
      tags:
      - license
      summary: Get licenses with filter
      description: |
        Returns a list of licenses for a given input set of filters. All related products and users are included in the response, which can be used for grouping.
      operationId: GetLicenses
      parameters:
      - name: page[number]
        in: query
        description: Page number if the results have more items than items per page.
          Default = 1.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: number
        example: 1
      - name: filter[user_id]
        in: query
        description: Return only licenses which belongs to specified user id.
        required: false
        style: form
        explode: true
        schema:
          type: number
        example: "42"
      - name: filter[with_auto_renew]
        in: query
        description: Return only licenses which has auto renew enabled
        required: false
        style: form
        explode: true
        schema:
          type: boolean
        example: true
      - name: filter[status]
        in: query
        description: Return only licenses which are in specified status, should be
          "one of"
        required: false
        style: form
        explode: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - PROCESSING
            - CHECK_INVALID
            - ORDER_ERROR
            - ACTIVE
            - EXPIRED
            - SUSPENDED
            - SUSPENDEDADMIN
        example: ACTIVE
      - name: filter[payment_method]
        in: query
        description: Return only licenses which were purchased with specified payment
          method
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: billing
      - name: filter[purchase_later_than]
        in: query
        description: Return only licenses which were purchased after specified date.
          Full-date notation as defined by RFC 3339, section 5.6
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
        example: 2017-07-21
      - name: filter[active_from]
        in: query
        description: Return only licenses which became  active after specified date.
          Full-date notation as defined by RFC 3339, section 5.6
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
        example: 2017-07-21
      - name: filter[active_till]
        in: query
        description: Return only licenses which will become or already inactive before
          specified dat. Full-date notation as defined by RFC 3339, section 5.6
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
        example: 2017-07-21
      responses:
        "200":
          description: Successful response
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: Bad Request
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
        "401":
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
components:
  schemas:
    ManagementLicenseResource:
      allOf:
      - $ref: '#/components/schemas/LicenseResource'
    Error:
      required:
      - code
      - details
      - id
      - status
      - title
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this particular occurrence of the problem.
        status:
          type: string
          description: The HTTP status code applicable to this problem, expressed
            as a string value.
        code:
          type: string
          description: An application-specific error code, expressed as a string value.
        title:
          type: string
          description: A short, human-readable summary of the problem that SHOULD
            NOT change from occurrence to occurrence of the problem.
        details:
          type: string
          description: A human-readable explanation specific to this occurrence of
            the problem.
      example:
        id: 6de7da3e-8877-4f2b-a670-16e18e5d79a0
        status: "400"
        code: "31201"
        title: Bad Request
        detail: Parameter 'Foo' is invalid
    LicenseResource:
      allOf:
      - $ref: '#/components/schemas/LicenseResourceIdentifier'
      - required:
        - attributes
        - relationships
        type: object
        properties:
          attributes:
            allOf:
            - $ref: '#/components/schemas/Attributes'
            - required:
              - start_date
              - status
              - stop_date
              type: object
              properties:
                status:
                  type: string
                  description: Current status of license
                  nullable: false
                  readOnly: true
                  example: ACTIVE
                  enum:
                  - PROCESSING
                  - CHECK_INVALID
                  - ORDER_ERROR
                  - ACTIVE
                  - EXPIRED
                  - SUSPENDED
                  - SUSPENDEDADMIN
                start_date:
                  type: integer
                  description: The Unix epoch timestamp denoting the start date of
                    the license
                  nullable: false
                  example: 1523268666
                stop_date:
                  type: integer
                  description: The Unix epoch timestamp denoting expiration date of
                    the license
                  nullable: false
                  example: 1523268698
          relationships:
            allOf:
            - $ref: '#/components/schemas/Relationships'
            - required:
              - product
              - user
              type: object
              properties:
                user:
                  required:
                  - data
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/UserResourceIdentifier'
                product:
                  required:
                  - data
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/ProductResourceIdentifier'
              additionalProperties: false
          links:
            allOf:
            - $ref: '#/components/schemas/Links'
            - type: object
              properties:
                self:
                  type: string
                  example: https://boox.fi/api/user/waqqas.jabbar@gmail.com/license/10
    LicenseResourceIdentifier:
      allOf:
      - $ref: '#/components/schemas/ResourceIdentifier'
      - type: object
        properties:
          id:
            type: string
            example: "42"
          type:
            pattern: ^License$
            type: string
            example: License
    ResourceIdentifier:
      required:
      - id
      - type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        type:
          $ref: '#/components/schemas/Type'
      discriminator:
        propertyName: type
    Id:
      type: string
      description: The id of the resource being referenced
      example: e022f021-11f5-4cd6-89f2-02535d89eed6
    Type:
      type: string
      description: Used to describe resource objects that share common attributes
        and relationships.
      example: ResourceOject
    Attributes:
      type: object
      additionalProperties: true
      description: An attributes object representing some of the resourceâ€™s data.
    Relationships:
      type: object
      additionalProperties:
        required:
        - data
        type: object
        properties:
          data:
            oneOf:
            - $ref: '#/components/schemas/ResourceIdentifier'
            - type: array
              items:
                $ref: '#/components/schemas/ResourceIdentifier'
      description: A relationships object describing relationships between the resource
        and other JSON:API resources.
    UserResourceIdentifier:
      allOf:
      - $ref: '#/components/schemas/ResourceIdentifier'
      - type: object
        properties:
          id:
            type: string
            example: "41"
          type:
            pattern: ^User$
            type: string
            example: User
    ProductResourceIdentifier:
      allOf:
      - $ref: '#/components/schemas/ResourceIdentifier'
      - type: object
        properties:
          id:
            type: string
            example: "41"
          type:
            pattern: ^Product$
            type: string
            example: Product
    Links:
      type: object
      description: A links object containing links related to the resource.
    inline_response_200:
      required:
      - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ManagementLicenseResource'
    inline_response_400:
      required:
      - errors
      type: object
      properties:
        errors:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Error'
            - example:
                status: "400"
                code: "10201"
                title: Bad Request
                detail: Standard error response
    inline_response_401:
      required:
      - errors
      type: object
      properties:
        errors:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Error'
            - example:
                status: "401"
                code: "10201"
                title: Invalid api key
                detail: 'Invalid authorization api key: Unauthorised Api key provided
                  in the header'
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      description: Internal API key, format "Apikey 1a2b3c4d".
      name: Authorization
      in: header
