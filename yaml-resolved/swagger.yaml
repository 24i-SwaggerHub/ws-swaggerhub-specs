openapi: 3.0.0
info:
  title: User License API
  description: User License API used for managing user licenses and related products.
    Supposed to be consumed by user client application.
  version: 4.0.0
servers:
- url: https://virtserver.swaggerhub.com/24i-API/UserLicense/4.0.0
  description: SwaggerHub API Auto Mocking
- url: https://testing.booxmedia.xyz/api/license/v4
  description: Testing server
paths:
  /users/{user_id}/licenses:
    get:
      tags:
      - license
      summary: Get user licenses index
      description: |
        Returns all licenses for a given user. All related products are included in the response, which can be used for grouping.
      operationId: GetUserLicenses
      parameters:
      - name: user_id
        in: path
        description: The ID of the user to fetch licenses for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: Unauthorized
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
        "404":
          description: User does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/inline_response_404'
      security:
      - bearerAuth: []
    post:
      tags:
      - license
      summary: Purchase new license
      description: |
        Creates new license associated with user and product
      operationId: PurchaseUserLicense
      parameters:
      - name: user_id
        in: path
        description: The ID of the user to create license for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Idempotency-Key
        in: header
        description: Client unique generated value for server to recognize subsequent
          retries
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 518d5812-b8e8-43a4-b3b0-8f9c5cdc31b9
      requestBody:
        $ref: '#/components/requestBodies/CreateLicenseRequestBody'
      responses:
        "201":
          description: Successful response on created resource
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        "403":
          description: Incorrect PIN code
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/inline_response_403'
        "404":
          description: Not Found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/inline_response_404_1'
      security:
      - bearerAuth: []
  /products:
    get:
      tags:
      - license
      summary: Get all user-visible products.
      description: |
        Returns all products which are visible and byable by user. All related product items are included in the response, which can be used for grouping, sorting and showing product details.
      operationId: GetAllProducts
      parameters:
      - name: page[number]
        in: query
        description: Page number if the results have more items than items per page.
          Default = 1.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: number
        example: 1
      responses:
        "200":
          description: Successful response
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
components:
  schemas:
    CreateLicenseResource:
      allOf:
      - $ref: '#/components/schemas/CreateLicenseResourceIdentifier'
      - $ref: '#/components/schemas/LicenseResourceProperties'
    LicenseResource:
      allOf:
      - $ref: '#/components/schemas/LicenseResourceIdentifier'
      - $ref: '#/components/schemas/LicenseResourceProperties'
    LicenseResourceIdentifier:
      allOf:
      - $ref: '#/components/schemas/ResourceIdentifier'
      - type: object
        properties:
          id:
            type: string
            example: "42"
          type:
            $ref: '#/components/schemas/LicenseResourceType'
    ResourceIdentifier:
      required:
      - id
      - type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        type:
          $ref: '#/components/schemas/Type'
      discriminator:
        propertyName: type
    Id:
      type: string
      description: The id of the resource being referenced
      example: e022f021-11f5-4cd6-89f2-02535d89eed6
    Type:
      type: string
      description: Used to describe resource objects that share common attributes
        and relationships.
      example: ResourceOject
    LicenseResourceType:
      pattern: ^License$
      type: string
      example: License
    LicenseResourceProperties:
      required:
      - attributes
      - relationships
      type: object
      properties:
        attributes:
          allOf:
          - required:
            - start_date
            - status
            - stop_date
            type: object
            properties:
              status:
                type: string
                description: Current status of license
                nullable: false
                readOnly: true
                example: ACTIVE
                enum:
                - PROCESSING
                - CHECK_INVALID
                - ORDER_ERROR
                - ACTIVE
                - EXPIRED
                - SUSPENDED
                - SUSPENDEDADMIN
              start_date:
                type: integer
                description: The Unix epoch timestamp denoting the start date of the
                  license
                nullable: false
                readOnly: true
                example: 1523268666
              stop_date:
                type: integer
                description: The Unix epoch timestamp denoting expiration date of
                  the license
                nullable: false
                readOnly: true
                example: 1523268698
        relationships:
          allOf:
          - $ref: '#/components/schemas/Relationships'
          - required:
            - product
            - user
            type: object
            properties:
              user:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResourceIdentifier'
              product:
                required:
                - data
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductResourceIdentifier'
            additionalProperties: false
    Relationships:
      type: object
      additionalProperties:
        required:
        - data
        type: object
        properties:
          data:
            oneOf:
            - $ref: '#/components/schemas/ResourceIdentifier'
            - type: array
              items:
                $ref: '#/components/schemas/ResourceIdentifier'
      description: A relationships object describing relationships between the resource
        and other JSON:API resources.
    UserResourceIdentifier:
      allOf:
      - $ref: '#/components/schemas/ResourceIdentifier'
      - type: object
        properties:
          id:
            type: string
            example: "41"
          type:
            pattern: ^User$
            type: string
            example: User
    ProductResourceIdentifier:
      allOf:
      - $ref: '#/components/schemas/ResourceIdentifier'
      - type: object
        properties:
          id:
            type: string
            example: "41"
          type:
            pattern: ^Product$
            type: string
            example: Product
    ProductResource:
      allOf:
      - $ref: '#/components/schemas/ProductResourceIdentifier'
      - required:
        - attributes
        - relationships
        type: object
        properties:
          attributes:
            allOf:
            - $ref: '#/components/schemas/Attributes'
            - required:
              - description
              - title
              type: object
              properties:
                title:
                  type: string
                  description: Title of the product
                  example: Sport channels meagpack
                description:
                  type: string
                  description: Description of the product
                  example: Complete collection fo all sports channels
                  default: ""
                type:
                  type: string
                  description: Type of the product
                  example: CHANNEL_GROUP
                is_premium:
                  type: boolean
                  description: Whether the product is premium one
                  example: true
                  default: false
              additionalProperties: false
          relationships:
            allOf:
            - $ref: '#/components/schemas/Relationships'
            - type: object
              properties:
                live:
                  required:
                  - data
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/ChannelResourceIdentifier'
                  description: Items with live service enabled
                catchup:
                  required:
                  - data
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/ChannelResourceIdentifier'
                  description: Items with cathup service enabled
                npvr:
                  required:
                  - data
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/ChannelResourceIdentifier'
                  description: Items with npvr service enabled enabled
                startover:
                  required:
                  - data
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/ChannelResourceIdentifier'
                  description: Items with startover service enabled
              additionalProperties: false
    Attributes:
      type: object
      additionalProperties: true
      description: An attributes object representing some of the resource’s data.
    ChannelResourceIdentifier:
      allOf:
      - $ref: '#/components/schemas/ResourceIdentifier'
      - type: object
        properties:
          id:
            type: string
            example: "42"
          type:
            pattern: ^Channel$
            type: string
            example: Channel
    Error:
      required:
      - code
      - details
      - id
      - status
      - title
      type: object
      properties:
        id:
          type: string
          description: A unique identifier for this particular occurrence of the problem.
        status:
          type: string
          description: The HTTP status code applicable to this problem, expressed
            as a string value.
        code:
          type: string
          description: An application-specific error code, expressed as a string value.
        title:
          type: string
          description: A short, human-readable summary of the problem that SHOULD
            NOT change from occurrence to occurrence of the problem.
        details:
          type: string
          description: A human-readable explanation specific to this occurrence of
            the problem.
      example:
        id: 6de7da3e-8877-4f2b-a670-16e18e5d79a0
        status: "400"
        code: "31201"
        title: Bad Request
        detail: Parameter 'Foo' is invalid
    CreateLicenseResourceIdentifier:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/LicenseResourceType'
    inline_response_200:
      required:
      - data
      - included
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LicenseResource'
        included:
          type: array
          items:
            $ref: '#/components/schemas/ProductResource'
    inline_response_401:
      required:
      - errors
      type: object
      properties:
        errors:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Error'
            - example:
                status: "401"
                code: "10201"
                title: Invalid token
                detail: Client is not authorized to fetch user licenses
    inline_response_404:
      required:
      - errors
      type: object
      properties:
        errors:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Error'
            - example:
                status: "404"
                code: "10101"
                title: Not Found
                detail: The requested user does not exist
    inline_response_201:
      required:
      - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LicenseResource'
    inline_response_403:
      required:
      - errors
      properties:
        errors:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Error'
            - example:
                id: 2d3ba0ea-0aca-11ea-b2d0-4bc6fcad2537
                status: "403"
                code: "10200"
                title: Incorrect PIN code
                detail: The PIN code that you supplied does not match the one we have
                  stored for the account.
    inline_response_404_1:
      required:
      - errors
      properties:
        errors:
          type: array
          items:
            allOf:
            - $ref: '#/components/schemas/Error'
            - example:
                id: 2d3ba0ea-0aca-11ea-b2d0-4bc6fcad2537
                status: "404"
                code: "30701"
                title: Unable to purchase license
                detail: Product "5000" not found
    inline_response_200_1:
      required:
      - data
      - included
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductResource'
  requestBodies:
    CreateLicenseRequestBody:
      content:
        application/json:
          schema:
            required:
            - data
            type: object
            properties:
              data:
                required:
                - attributes
                - meta
                - relationships
                - type
                type: object
                allOf:
                - $ref: '#/components/schemas/CreateLicenseResource'
                - properties:
                    attributes:
                      required:
                      - purchase_record
                      type: object
                      properties:
                        purchase_record:
                          required:
                          - payment_method
                          type: object
                          properties:
                            payment_method:
                              type: string
                              description: License purcahse payment method
                              example: billing
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT recieved from server, example "Bearer 1a2b3c4d".
      scheme: bearer
      bearerFormat: JWT
